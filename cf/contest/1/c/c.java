/* Generated by powerful Codeforces Tool
 * Author: PierreQi
 * Time: 2022-08-13 20:59:36
**/

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.StringTokenizer;
import java.io.InputStreamReader;

public class c{

    //数学算法很诡异,需要重看
    //     #: 168082054
    //     when: 2022-08-13 21:21
    //     prob: C - Ancient Berland Circus
    //     lang: Java 11
    //   status: Accepted                    
    //     time: 404 ms
    //   memory: 0 B
	public static void main(String[] args){
		FastScanner sc = new FastScanner();
        
        PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));        

		//-------------Your Code Here -----------------
		double[] p1 = new double[2];
        double[] p2 = new double[2];
        double[] p3 = new double[2];

        p1[0] = sc.nextDouble();
        p1[1] = sc.nextDouble();
        p2[0] = sc.nextDouble();
        p2[1] = sc.nextDouble();
        p3[0] = sc.nextDouble();
        p3[1] = sc.nextDouble();

        double a = distance(p1, p2);
        double b = distance(p2, p3);
        double c = distance(p3, p1);

        double s = (a + b + c) / 2;
        //海伦公式计算三角形面积
        double area = Math.sqrt(s*(s-a)*(s-b)*(s-c));
        // 这也是公式 正弦定理
        double radius = a*b*c/(4 * area);
        
        //圆心到三角形三个顶点组成的三个圆心角
        double A = Math.acos((b*b + c*c - a*a) / (2*b*c));
        double B = Math.acos((a*a + c*c - b*b) / (2*a*c));
        double C = Math.acos((a*a + b*b - c*c) / (2*a*b));
        
        //计算多少边形 // WHY ?
        int n = (int)Math.round(Math.PI / gcd(gcd(A, B), C));

        //知道两条边以及夹角求面积

        out.printf("%.7f\n", n * radius * radius * Math.sin(2 * Math.PI / n) / 2);
		
		//-------------Your Code Above-----------------
		out.close();
	} 

    public static double distance(double[] p1,double[] p2){
        return Math.sqrt((p1[0] - p2[0]) * (p1[0] - p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1]));
    }

    //why this num?
    final static double EPS = 1e-3;
    
    public static double gcd(double a, double b) {
        while (Math.abs(a) > EPS && Math.abs(b) > EPS) {
            if (a > b)
                a -= (int)(a / b) * b;
            else
                b -= (int)(b / a) * a;
        }
        return a + b;
    }

	public static class FastScanner {
        
		BufferedReader br;
        StringTokenizer st;

        public FastScanner() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine(){
            String str = "";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }
}
